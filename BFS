#include <bits/stdc++.h> 
#include<unordered_map>
#include<set>
#include<vector>
#include<queue>
void solve(unordered_map<int,set<int> > &adj,unordered_map<int,bool> &visited,int val,vector<int> &ans)
{
    queue<int> q;
    q.push(val);
    visited[val]=true;
    while(!q.empty())
    {
        int frontnodes=q.front();
        q.pop();
        ans.push_back(frontnodes);
        for(auto i : adj[frontnodes])
        {
            if(!visited[i])
            {
                q.push(i);
                visited[i]=true;
            }
        }
        
    }
}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    unordered_map<int,set<int> > adj;
    // adjacent_list(adj,edges);
    for(int i=0;i<edges.size();i++)
    {
        adj[edges[i].first].insert(edges[i].second);
        adj[edges[i].second].insert(edges[i].first);
    }
    unordered_map<int,bool> visited;
    vector<int> ans;
    for(int i=0;i<vertex;i++) // FOR DISCONNECTED GRAPH
    {
          if(!visited[i])
          {
              solve(adj,visited,i,ans);
          }   
    }
    return ans;
}

4 4
0 1
0 3
1 2
2 3







